"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9251],{3905:(e,t,o)=>{o.d(t,{Zo:()=>s,kt:()=>m});var a=o(7294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function r(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,a)}return o}function l(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?r(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function i(e,t){if(null==e)return{};var o,a,n=function(e,t){if(null==e)return{};var o,a,n={},r=Object.keys(e);for(a=0;a<r.length;a++)o=r[a],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)o=r[a],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var d=a.createContext({}),c=function(e){var t=a.useContext(d),o=t;return e&&(o="function"==typeof e?e(t):l(l({},t),e)),o},s=function(e){var t=c(e.components);return a.createElement(d.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var o=e.components,n=e.mdxType,r=e.originalType,d=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),p=c(o),g=n,m=p["".concat(d,".").concat(g)]||p[g]||u[g]||r;return o?a.createElement(m,l(l({ref:t},s),{},{components:o})):a.createElement(m,l({ref:t},s))}));function m(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=o.length,l=new Array(r);l[0]=g;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i[p]="string"==typeof e?e:n,l[1]=i;for(var c=2;c<r;c++)l[c]=o[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,o)}g.displayName="MDXCreateElement"},3791:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var a=o(7462),n=(o(7294),o(3905));const r={id:"catalognode-index",title:"CatalogNode"},l=void 0,i={unversionedId:"nodes/catalog-node/catalognode-index",id:"nodes/catalog-node/catalognode-index",title:"CatalogNode",description:"Catalog Nodes apply configuration to NodeCode allowing NodeCode to be reused in different",source:"@site/docs/nodes/catalog-node/index.md",sourceDirName:"nodes/catalog-node",slug:"/nodes/catalog-node/",permalink:"/docs/nodes/catalog-node/",draft:!1,tags:[],version:"current",frontMatter:{id:"catalognode-index",title:"CatalogNode"},sidebar:"tutorialSidebar",previous:{title:"NodeCode",permalink:"/docs/nodes/node-code/"},next:{title:"Process Node",permalink:"/docs/nodes/process-node"}},d={},c=[{value:"CatalogNode",id:"catalognode",level:2},{value:"CatalogNode Class",id:"catalognode-class",level:3},{value:"CatalogNode Decorator",id:"catalognode-decorator",level:3},{value:"Categories",id:"categories",level:2}],s={toc:c},p="wrapper";function u(e){let{components:t,...o}=e;return(0,n.kt)(p,(0,a.Z)({},s,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Catalog Nodes apply configuration to NodeCode allowing NodeCode to be reused in different\nways. For example, the ",(0,n.kt)("a",{parentName:"p",href:"/docs/reference/node-code/ContextValueComparatorNodeCode"},"ContextValueComparatorNodeCode"),"\ncan have many Catalog Nodes that define different common comparators like ",(0,n.kt)("inlineCode",{parentName:"p"},"Greater Than Zero"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"Is Zero"),"\nor any other comparator that is based on a constant."),(0,n.kt)("h2",{id:"catalognode"},"CatalogNode"),(0,n.kt)("p",null,"The ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/cybermantix/feral-core/blob/master/src/Process/Catalog/CatalogNode/CatalogNodeInterface.php"},(0,n.kt)("strong",{parentName:"a"},(0,n.kt)("inlineCode",{parentName:"strong"},"CatalogNodeInterface"))),"\ninterface must be implemented to have a CatalogNode work within the framework. The ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/cybermantix/feral-core/blob/master/src/Process/Catalog/CatalogNode/CatalogNode.php"},(0,n.kt)("strong",{parentName:"a"},(0,n.kt)("inlineCode",{parentName:"strong"},"CatalogNode"))),"\nimplementation can be used with your favorite framework\nto add Catalog Nodes via a container and declarative options."),(0,n.kt)("h3",{id:"catalognode-class"},"CatalogNode Class"),(0,n.kt)("p",null,"You can add catalog node classes to your code, just implement the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/cybermantix/feral-core/blob/master/src/Process/Catalog/CatalogNode/CatalogNodeInterface.php"},(0,n.kt)("strong",{parentName:"a"},(0,n.kt)("inlineCode",{parentName:"strong"},"CatalogNodeInterface"))),".\nIf you are using the Feral Inline package with Symfony, all classes that implement the ",(0,n.kt)("inlineCode",{parentName:"p"},"CatalogNodeInterface")," interface\nwill automatically be included in the catalog."),(0,n.kt)("h3",{id:"catalognode-decorator"},"CatalogNode Decorator"),(0,n.kt)("p",null,"Since Catalog Nodes are NodeCode with configuration applied, you can use the Attribute\n",(0,n.kt)("a",{parentName:"p",href:"https://github.com/cybermantix/feral-core/blob/master/src/Process/Attributes/CatalogNodeDecorator.php"},(0,n.kt)("strong",{parentName:"a"},(0,n.kt)("inlineCode",{parentName:"strong"},"Feral\\Core\\Process\\Attributes\\CatalogNodeDecorator")))," in\nyour NodeCode clas to add Catalog Nodes to your catalog. See ","[/node-code/JsonDecodeNodeCode]",")(this example) to see\na NodeCode that has been decorated with a Catalog Node."),(0,n.kt)("p",null,"Example: ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/cybermantix/feral-core/blob/master/src/Process/NodeCode/Flow/ContextValueComparatorNodeCode.php"},(0,n.kt)("strong",{parentName:"a"},(0,n.kt)("inlineCode",{parentName:"strong"},"ContextValueComparatorNodeCode")))),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"...\n...\n...\nuse Feral\\Core\\Process\\Attributes\\CatalogNodeDecorator;\n\n#[CatalogNodeDecorator(\n    key:'is_zero',\n    name: 'Is Zero',\n    group: 'Flow',\n    description: 'Compare if a context value is zero.',\n    configuration: [self::OPERATOR => Criterion::EQ, self::TEST_VALUE => 0])]\nclass ContextValueComparatorNodeCode implements NodeCodeInterface\n{\n    use NodeCodeMetaTrait,\n        ResultsTrait,\n        ConfigurationTrait,\n        ConfigurationValueTrait,\n        EmptyConfigurationDescriptionTrait,\n        ContextValueTrait,\n        BooleanResultsTrait;\n...\n...\n...\n")),(0,n.kt)("h2",{id:"categories"},"Categories"),(0,n.kt)("p",null,"Catalog Nodes are grouped into categories using the group property. It's possible to have hundreds of\nnodes in a Catalog so grouping them is critical to keep the catalog orderly."),(0,n.kt)("p",null,"Categories in the core"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Data"),(0,n.kt)("li",{parentName:"ul"},"Flow")))}u.isMDXComponent=!0}}]);