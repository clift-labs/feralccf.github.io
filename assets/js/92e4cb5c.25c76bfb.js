"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8559],{3905:(e,t,o)=>{o.d(t,{Zo:()=>l,kt:()=>f});var n=o(7294);function a(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function r(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?r(Object(o),!0).forEach((function(t){a(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function s(e,t){if(null==e)return{};var o,n,a=function(e,t){if(null==e)return{};var o,n,a={},r=Object.keys(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||(a[o]=e[o]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(a[o]=e[o])}return a}var c=n.createContext({}),d=function(e){var t=n.useContext(c),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},l=function(e){var t=d(e.components);return n.createElement(c.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var o=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=d(o),h=a,f=p["".concat(c,".").concat(h)]||p[h]||u[h]||r;return o?n.createElement(f,i(i({ref:t},l),{},{components:o})):n.createElement(f,i({ref:t},l))}));function f(e,t){var o=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=o.length,i=new Array(r);i[0]=h;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[p]="string"==typeof e?e:a,i[1]=s;for(var d=2;d<r;d++)i[d]=o[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,o)}h.displayName="MDXCreateElement"},4335:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var n=o(7462),a=(o(7294),o(3905));const r={id:"nodecode-index",title:"NodeCode"},i=void 0,s={unversionedId:"nodes/node-code/nodecode-index",id:"nodes/node-code/nodecode-index",title:"NodeCode",description:"A Node is one element in a process that performs one action",source:"@site/docs/nodes/node-code/index.md",sourceDirName:"nodes/node-code",slug:"/nodes/node-code/",permalink:"/docs/nodes/node-code/",draft:!1,tags:[],version:"current",frontMatter:{id:"nodecode-index",title:"NodeCode"},sidebar:"tutorialSidebar",previous:{title:"Nodes",permalink:"/docs/nodes/"},next:{title:"CatalogNode",permalink:"/docs/nodes/catalog-node/"}},c={},d=[{value:"NodeCode Configuration",id:"nodecode-configuration",level:2},{value:"Use configuration CNF to store paths to context CTX paths and values",id:"use-configuration-cnf-to-store-paths-to-context-ctx-paths-and-values",level:3},{value:"Configuration Value Modifier",id:"configuration-value-modifier",level:2},{value:"NodeCode Source",id:"nodecode-source",level:2},{value:"NodeCode Factory",id:"nodecode-factory",level:2}],l={toc:d},p="wrapper";function u(e){let{components:t,...o}=e;return(0,a.kt)(p,(0,n.Z)({},l,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"A Node is one element in a process that performs one action\nin the process. The node can perform any work using information\nin the configuration of the node instance, the context passed to\nthe node from the process, or a static action that does not\nhave a configuration or use data in the context."),(0,a.kt)("p",null,"There are three categories of nodes:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"flow nodes that returns a response based on information in the context that route the process to different branches."),(0,a.kt)("li",{parentName:"ul"},"data nodes that perform context manipulation activities that add, remove, modify data stored in the context."),(0,a.kt)("li",{parentName:"ul"},"work nodes that do perform work outside the process system")),(0,a.kt)("p",null,"Each node has a type which is represented the fully qualified name\nof the node class. Each node has a key which is unique in its process\nand is used to navigate the flow of the process."),(0,a.kt)("p",null,"A node is called by the process using the run function that receives\nthe process Data as the sole parameter and returns a ProcessNodeResult\nobject containing information allowing the process to route upon a successful\nrun or error information when a process fails."),(0,a.kt)("h2",{id:"nodecode-configuration"},"NodeCode Configuration"),(0,a.kt)("p",null,"NodeCode must include an array of configuration objects. Configuration Description\nobjects describe one configuration property and allows tools to be built to manage\nNodeCode objects. These configuration descriptions will be used in the Catalog Node and\nProcess Nodes. "),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"/docs/nodes#configuration"},"Node:Configuration")," to see the configuration hierarchy. "),(0,a.kt)("p",null,"Types of Configuration values:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/cybermantix/feral-core/blob/master/src/Process/NodeCode/Configuration/Description/StringConfigurationDescription.php"},"string")," Use this configuration description for configuration values that are a boolean variable."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/cybermantix/feral-core/blob/master/src/Process/NodeCode/Configuration/Description/IntConfigurationDescription.php"},"int")," The type of the configuration is an int."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/cybermantix/feral-core/blob/master/src/Process/NodeCode/Configuration/Description/FloatConfigurationDescription.php"},"float")," The type of the configuration is a float."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/cybermantix/feral-core/blob/master/src/Process/NodeCode/Configuration/Description/BooleanConfigurationDescription.php"},"boolean"),"  The type of the configuration is a boolean."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/cybermantix/feral-core/blob/master/src/Process/NodeCode/Configuration/Description/StringArrayConfigurationDescription.php"},"string_array")," The type of the configuration is an array of strings."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/cybermantix/feral-core/blob/master/src/Process/NodeCode/Configuration/Description/IntArrayConfigurationDescription.php"},"int_array")," The type of the configuration is an array of int."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/cybermantix/feral-core/blob/master/src/Process/NodeCode/Configuration/Description/FloatArrayConfigurationDescription.php"},"float_array")," The type of the configuration is an array of floats.")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"The ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/cybermantix/feral-core/blob/master/src/Process/NodeCode/NodeCodeInterface.php"},(0,a.kt)("strong",{parentName:"a"},(0,a.kt)("inlineCode",{parentName:"strong"},"NodeCodeInterface")))," includes the public method ",(0,a.kt)("inlineCode",{parentName:"p"},"getConfigurationDescriptions"),". This\nmethod returns an array of ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/cybermantix/feral-core/blob/master/src/Process/NodeCode/Configuration/Description/ConfigurationDescriptionInterface.php"},(0,a.kt)("strong",{parentName:"a"},(0,a.kt)("inlineCode",{parentName:"strong"},"ConfigurationDescriptionInterface")))," objects. Visit the")),(0,a.kt)("h3",{id:"use-configuration-cnf-to-store-paths-to-context-ctx-paths-and-values"},"Use configuration CNF to store paths to context CTX paths and values"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"ContextInterface")," is passed into the NodeCodeInterface::process method and contains data used by\nthe method. Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"ContextValueTrait")," in your NodeCode to get helper methods which make\nit easy to get a value from the context."),(0,a.kt)("p",null,"Use class constants for your path to get the value stored in the context. For keys to get values from\nthe configuration use ",(0,a.kt)("inlineCode",{parentName:"p"},"CNF_")," which is short for configuration. For keys to get values from the context\nuse the prefix ",(0,a.kt)("inlineCode",{parentName:"p"},"CTX_"),". For default values for either the configuration or the context include a ",(0,a.kt)("inlineCode",{parentName:"p"},"D")," at\nthe start of the prefix to designate it's a default value. For example a default path might be ",(0,a.kt)("inlineCode",{parentName:"p"},"DCTX_INPUT"),'\nwith the value "input". Then the CatalogNode and ProcessNodes can set a different context path in the\nconfiguration if it provides unique locations for that particular node. '),(0,a.kt)("p",null,"Imagine a NodeCode that calls a URL and the configuration contains the protocol, the host, and the\npath to make a complete URL. You could default the protocol with ",(0,a.kt)("inlineCode",{parentName:"p"},"DCNF_protocol"),' making it easier to\ncreate CatalogNodes and ProcessNodes by skipping that configuration value if it uses the standard "https"\nprotocol. An example of a default context value might be a default boolean for a particular operation.\n',(0,a.kt)("inlineCode",{parentName:"p"},"DCTX_RESPONSE"),' could be set to "false" if the code should treat empty context values the same as a\n"false" value stored in the context.'),(0,a.kt)("p",null,"It is common to allow the ",(0,a.kt)("inlineCode",{parentName:"p"},"CatalogNode")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"ProcessNode")," to define the path in the context where\nthe data is stored. Include a default value for the path making it easy to use but also configurable. In\nthis case where the configuration sets the context path, include both ",(0,a.kt)("inlineCode",{parentName:"p"},"CNF_")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"CTX_")," which designates\nconfigured context paths. The example below uses ",(0,a.kt)("inlineCode",{parentName:"p"},"CNF_CTX_INPUT")," constant to set the path in the configuration\nto get the path of the context. Then to set the default prepend the ",(0,a.kt)("inlineCode",{parentName:"p"},"D")," making the default\nconfiguration path for the context ",(0,a.kt)("inlineCode",{parentName:"p"},"DCNF_CTX_INPUT"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"...\n    const DCNF_CTX_INPUT = 'command_input'; // the default path to the context value\n    public const CNF_CTX_INPUT = 'input'; // the configuration path for the context path\n...\n    // From the configuration get the context path where the data is stored. \n    // If the configuration is empty then use 'command_input' as the path in\n    // the context\n    $inputPath = $this->getRequiredConfigurationValue(self::CNF_CTX_INPUT, self::DCNF_INPUT);\n    \n    // Using the path stored in the configuration, get the data from the context\n    $input = $this->getStringValueFromContext($inputPath, $context);\n...\n")),(0,a.kt)("h2",{id:"configuration-value-modifier"},"Configuration Value Modifier"),(0,a.kt)("p",null,"To modify a configuration value ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/cybermantix/feral-core/blob/master/src/Process/NodeCode/Configuration/ValueModifier/ConfigurationValueModifierInterface.php"},"ConfigurationValueModifierInterface"),"\nis the interface that can be used to modify a value. This can be used if a template variable or secret is used and replaced when\nthe value is actually set."),(0,a.kt)("p",null,"When a configuration value is set into a node, the value\nof the node can be interpreted and processed before being\nset. The value of a configuration can be a key to another\nvalue stored in a database or webservice."),(0,a.kt)("p",null,"EX: if the value contained secret|abc123 the modifyValue\nfunction can look up the secret by its key abc123 and\nstore the secret value."),(0,a.kt)("p",null,"EX: if the value contained db|123 then the actual configuration\nvalue is in the database and the value stored in the node\ninstance will be replaced with the value in the database."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"The ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/cybermantix/feral-core/blob/master/src/Process/NodeCode/Configuration/NodeConfigurationBuilder.php"},(0,a.kt)("strong",{parentName:"a"},(0,a.kt)("inlineCode",{parentName:"strong"},"NodeConfigurationBuilder"))),"\ncan include an array of ConfigurationValueModifiers that can be used for high level\nvariable manipulation.")),(0,a.kt)("h2",{id:"nodecode-source"},"NodeCode Source"),(0,a.kt)("p",null,"A NodeCode Source provides NodeCode classes to the framework. NodeCode can live\nin different places in the code. The\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/cybermantix/feral-core/blob/master/src/Process/NodeCode/NodeCodeSource/NodeCodeSourceInterface.php"},(0,a.kt)("strong",{parentName:"a"},(0,a.kt)("inlineCode",{parentName:"strong"},"NodeCodeSourceInterface"))),"\nprovides a method to get the NodeCodes classes known to its source. The Core only\nhas a simple NodeCodeSource where an iterator of NodeCode classes. "),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Require the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/cybermantix/feral-inline"},"Feral Slack")," project and\nthe NodeCodeSource will contain all the objects that implement the\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/cybermantix/feral-core/blob/master/src/Process/NodeCode/NodeCodeInterface.php"},(0,a.kt)("strong",{parentName:"a"},(0,a.kt)("inlineCode",{parentName:"strong"},"NodeCodeInterface"))),"\nand make it available from the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/cybermantix/feral-core/blob/master/src/Process/NodeCode/NodeCodeSource/NodeCodeSource.php"},(0,a.kt)("strong",{parentName:"a"},(0,a.kt)("inlineCode",{parentName:"strong"},"NodeCodeSource"))),"\nservice.")),(0,a.kt)("h2",{id:"nodecode-factory"},"NodeCode Factory"),(0,a.kt)("p",null,"The NodeCode Factory collects all of the NodeCode sources and builds a collection of NodeCode.\nTo get a NodeCode, use the factory and pass the key of the NodeCode to the ",(0,a.kt)("inlineCode",{parentName:"p"},"getNodeCode")," method.\nTo get all available NodeCode objects use the ",(0,a.kt)("inlineCode",{parentName:"p"},"getNodeCodes")," method."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"See ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/cybermantix/feral-core/blob/master/src/Process/NodeCode/NodeCodeFactory.php"},(0,a.kt)("strong",{parentName:"a"},(0,a.kt)("inlineCode",{parentName:"strong"},"NodeCodeFactory")))," for details.")))}u.isMDXComponent=!0}}]);