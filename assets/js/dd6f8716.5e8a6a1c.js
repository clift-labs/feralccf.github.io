"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4550],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),d=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=d(e.components);return o.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},f=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=d(n),f=r,m=u["".concat(s,".").concat(f)]||u[f]||p[f]||a;return n?o.createElement(m,i(i({ref:t},c),{},{components:n})):o.createElement(m,i({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var d=2;d<a;d++)i[d]=n[d];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}f.displayName="MDXCreateElement"},6033:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var o=n(7462),r=(n(7294),n(3905));const a={sidebar_position:5,title:"ReadFileNodeCode",tags:["Category:Data","Package:Core"]},i=void 0,l={unversionedId:"nodes/node-code/ReadFileNodeCode",id:"nodes/node-code/ReadFileNodeCode",title:"ReadFileNodeCode",description:"Read the contents of a file into the context. The default maximum size is 1024^2 or 1048576 bytes.",source:"@site/docs/nodes/node-code/ReadFileNodeCode.md",sourceDirName:"nodes/node-code",slug:"/nodes/node-code/ReadFileNodeCode",permalink:"/docs/nodes/node-code/ReadFileNodeCode",draft:!1,tags:[{label:"Category:Data",permalink:"/docs/tags/category-data"},{label:"Package:Core",permalink:"/docs/tags/package-core"}],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,title:"ReadFileNodeCode",tags:["Category:Data","Package:Core"]},sidebar:"tutorialSidebar",previous:{title:"RandomValueNodeCode",permalink:"/docs/nodes/node-code/RandomValueNodeCode"},next:{title:"SetContextTableNodeCode",permalink:"/docs/nodes/node-code/SetContextTableNodeCode"}},s={},d=[{value:"Configuration Keys:",id:"configuration-keys",level:2},{value:"Results",id:"results",level:2},{value:"Process Method",id:"process-method",level:2}],c={toc:d},u="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Read the contents of a file into the context. The default maximum size is 1024^2 or 1048576 bytes."),(0,r.kt)("h2",{id:"configuration-keys"},"Configuration Keys:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"context_path")," - The context path to store the contents of the file"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"file")," - The file to read"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"maximum_size")," - The maximum size of the file")),(0,r.kt)("h2",{id:"results"},"Results"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ok")," - The message has been logged")),(0,r.kt)("h2",{id:"process-method"},"Process Method"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'public function process(ContextInterface $context): ResultInterface\n{\n    $filePath = $this->getRequiredConfigurationValue(self::FILE);\n    $path = $this->getRequiredConfigurationValue(self::CONTEXT_PATH);\n    $maximumSize = $this->getRequiredConfigurationValue(self::MAXIMUM_SIZE, self::DEFAULT_MAXIMUM_SIZE);\n\n    if (!$this->fileWrapper->isFile($filePath)) {\n        throw new \\Exception(sprintf(\'File path "%s" does not exist.\', $filePath));\n    } elseif (!$this->fileWrapper->isReadable($filePath)) {\n        throw new \\Exception(sprintf(\'File path "%s" does not readable.\', $filePath));\n    } elseif ($maximumSize < $this->fileWrapper->getFilesize($filePath)) {\n        throw new \\Exception(sprintf(\'File "%s" is larger than the maximum filesize allowed "%u".\', $filePath, $maximumSize));\n    }\n\n    $value = $this->fileWrapper->getFileContents($filePath);\n    $this->setValueInContext($path, $value, $context);\n\n    return $this->result(\n        ResultInterface::OK,\n        \'Read "%u" characters from file "%s".\',\n        [strlen($value), $value]\n    );\n}\n')))}p.isMDXComponent=!0}}]);