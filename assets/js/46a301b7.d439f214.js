"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1007],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),i=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=i(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},k=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),p=i(n),k=o,f=p["".concat(s,".").concat(k)]||p[k]||d[k]||l;return n?r.createElement(f,c(c({ref:t},u),{},{components:n})):r.createElement(f,c({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,c=new Array(l);c[0]=k;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a[p]="string"==typeof e?e:o,c[1]=a;for(var i=2;i<l;i++)c[i]=n[i];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}k.displayName="MDXCreateElement"},3438:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>c,default:()=>d,frontMatter:()=>l,metadata:()=>a,toc:()=>i});var r=n(7462),o=(n(7294),n(3905));const l={title:"slack_send_blocks",tags:["Category:Flow","Package:Slack"]},c=void 0,a={unversionedId:"reference/node-code/SlackSendBlocks",id:"reference/node-code/SlackSendBlocks",title:"slack_send_blocks",description:"Sned one to many blocks to a slack channel.",source:"@site/docs/reference/node-code/SlackSendBlocks.md",sourceDirName:"reference/node-code",slug:"/reference/node-code/SlackSendBlocks",permalink:"/docs/reference/node-code/SlackSendBlocks",draft:!1,tags:[{label:"Category:Flow",permalink:"/docs/tags/category-flow"},{label:"Package:Slack",permalink:"/docs/tags/package-slack"}],version:"current",frontMatter:{title:"slack_send_blocks",tags:["Category:Flow","Package:Slack"]},sidebar:"tutorialSidebar",previous:{title:"slack_block_builder",permalink:"/docs/reference/node-code/SlackBlockBuilderNodeCode"},next:{title:"CatalogNode",permalink:"/docs/category/catalognode"}},s={},i=[{value:"Key",id:"key",level:2},{value:"Configuration Keys:",id:"configuration-keys",level:2},{value:"Results",id:"results",level:2},{value:"Process Method",id:"process-method",level:2}],u={toc:i},p="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Sned one to many blocks to a slack channel."),(0,o.kt)("h2",{id:"key"},"Key"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"slack_section_block_builder")),(0,o.kt)("h2",{id:"configuration-keys"},"Configuration Keys:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"webhook")," - The URL for the webhook"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"blocks")," - A delimited set of paths that contain the blocks to be sent to the slack channel")),(0,o.kt)("h2",{id:"results"},"Results"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ok")," - The function has been run")),(0,o.kt)("h2",{id:"process-method"},"Process Method"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"}," public function process(ContextInterface $context): ResultInterface\n    {\n        $url = $this->getConfigurationValue(self::CNF_WEBHOOK_URL);\n        $blockPaths = $this->getArrayConfigurationValue(self::CNF_BLOCKS, []);\n\n        $blocks = [];\n        foreach($blockPaths as $path) {\n            $blocks[] = $this->getStringConfigurationValue($path);\n        }\n        \n        // SEND $blocks to the Webhook\n        // curl\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    \n        $response = curl_exec($ch);\n        $responseCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        if ($response === false) {\n            throw new ProcessException(sprintf(\n                'cURL error connecting to \"%s\". Error: %s',\n                $url,\n                curl_error($ch)\n            ));\n        }\n\n        return $this->result(\n            ResultInterface::OK,\n            'Sent \"%n\" blocks to the webhook.',\n            [count($blocks)]\n        );\n    }\n")))}d.isMDXComponent=!0}}]);