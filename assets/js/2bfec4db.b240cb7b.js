"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8385],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>m});var o=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=o.createContext({}),u=function(e){var t=o.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},c=function(e){var t=u(e.components);return o.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},f=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(r),f=n,m=p["".concat(s,".").concat(f)]||p[f]||d[f]||a;return r?o.createElement(m,l(l({ref:t},c),{},{components:r})):o.createElement(m,l({ref:t},c))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,l=new Array(a);l[0]=f;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:n,l[1]=i;for(var u=2;u<a;u++)l[u]=r[u];return o.createElement.apply(null,l)}return o.createElement.apply(null,r)}f.displayName="MDXCreateElement"},9626:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>u});var o=r(7462),n=(r(7294),r(3905));const a={sidebar_position:5,title:"context_value_comparator",tags:["Category:Flow","Package:Core"]},l=void 0,i={unversionedId:"reference/node-code/ContextValueComparatorNodeCode",id:"reference/node-code/ContextValueComparatorNodeCode",title:"context_value_comparator",description:"Test if a value in the context passes a test with an operator.  To see the list of",source:"@site/docs/reference/node-code/ContextValueComparatorNodeCode.md",sourceDirName:"reference/node-code",slug:"/reference/node-code/ContextValueComparatorNodeCode",permalink:"/docs/reference/node-code/ContextValueComparatorNodeCode",draft:!1,tags:[{label:"Category:Flow",permalink:"/docs/tags/category-flow"},{label:"Package:Core",permalink:"/docs/tags/package-core"}],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,title:"context_value_comparator",tags:["Category:Flow","Package:Core"]},sidebar:"tutorialSidebar",previous:{title:"calculation",permalink:"/docs/reference/node-code/CalculationNodeCode"},next:{title:"counter",permalink:"/docs/reference/node-code/CounterNodeCode"}},s={},u=[{value:"Key",id:"key",level:2},{value:"Configuration Keys:",id:"configuration-keys",level:2},{value:"Operator Options",id:"operator-options",level:3},{value:"Results",id:"results",level:2},{value:"Process Method",id:"process-method",level:2},{value:"Catalog Node Decorators",id:"catalog-node-decorators",level:2}],c={toc:u},p="wrapper";function d(e){let{components:t,...r}=e;return(0,n.kt)(p,(0,o.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Test if a value in the context passes a test with an operator.  To see the list of\navailable operators see ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/cybermantix/feral-core/blob/master/src/Utility/Filter/Criterion.php"},(0,n.kt)("strong",{parentName:"a"},(0,n.kt)("inlineCode",{parentName:"strong"},"\\Feral\\Core\\Utility\\Filter\\Criterion")))),(0,n.kt)("h2",{id:"key"},"Key"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"context_value_comparator")),(0,n.kt)("h2",{id:"configuration-keys"},"Configuration Keys:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"operator"),"    - The operator used in the test"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"test_value"),"  - The value used to test the actual value in the context"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"context_path")," - The key used to retrieve the actual value from the context")),(0,n.kt)("h3",{id:"operator-options"},"Operator Options"),(0,n.kt)("p",null,"See see ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/cybermantix/feral-core/blob/master/src/Utility/Filter/Criterion.php"},(0,n.kt)("strong",{parentName:"a"},(0,n.kt)("inlineCode",{parentName:"strong"},"\\Feral\\Core\\Utility\\Filter\\Criterion")))," for details"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"eq"),(0,n.kt)("li",{parentName:"ul"},"gt"),(0,n.kt)("li",{parentName:"ul"},"gte"),(0,n.kt)("li",{parentName:"ul"},"lt"),(0,n.kt)("li",{parentName:"ul"},"lte"),(0,n.kt)("li",{parentName:"ul"},"not"),(0,n.kt)("li",{parentName:"ul"},"contains"),(0,n.kt)("li",{parentName:"ul"},"in"),(0,n.kt)("li",{parentName:"ul"},"nin"),(0,n.kt)("li",{parentName:"ul"},"not_empty")),(0,n.kt)("h2",{id:"results"},"Results"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"true")," - The value in the context evaluates to true with the operator and test value"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"false")," - The value in the context evaluates to false with the operator and test value")),(0,n.kt)("h2",{id:"process-method"},"Process Method"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},'    public function process(ContextInterface $context): ResultInterface\n    {\n        $contextPath = $this->getRequiredStringConfigurationValue(self::CONTEXT_PATH);\n        $testValue = $this->getRequiredConfigurationValue(self::TEST_VALUE);\n        $operator = $this->getRequiredConfigurationValue(self::OPERATOR);\n        $contextValue = $this->getValueFromContext($contextPath, $context);\n        if ($this->comparator->compare($contextValue, $operator, $testValue)) {\n            if (is_array($testValue)) {\n                $testValue = implode(\',\', $testValue);\n            }\n            return $this->result(\n                ResultInterface::TRUE,\n                \'The "%s" context value passes the "%s" test with test value "%s".\',\n                [$contextValue, $operator, $testValue]\n            );\n        } else {\n            if (is_array($contextValue)) {\n                $contextValue = implode(\',\', $contextValue);\n            }\n            if (is_array($testValue)) {\n                $testValue = implode(\',\', $testValue);\n            }\n            return $this->result(\n                ResultInterface::FALSE,\n                \'The "%s" context value does not pass the "%s" test with test value "%s".\',\n                [$contextValue, $operator, $testValue]\n            );\n        }\n    }\n')),(0,n.kt)("h2",{id:"catalog-node-decorators"},"Catalog Node Decorators"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"#[CatalogNodeDecorator(\n    key:'is_zero',\n    name: 'Is Zero',\n    group: 'Flow',\n    description: 'Compare if a context value is zero.',\n    configuration: [self::OPERATOR => Criterion::EQ, self::TEST_VALUE => 0])]\n#[CatalogNodeDecorator(\n    key:'is_not_zero',\n    name: 'Is Not Zero',\n    group: 'Flow',\n    description: 'Compare if a context value is not zero.',\n    configuration: [self::OPERATOR => Criterion::NOT, self::TEST_VALUE => 0])]\n#[CatalogNodeDecorator(\n    key:'is_greater_than_zero',\n    name: 'Is Greater Than Zero',\n    group: 'Flow',\n    description: 'Compare if a context value is greater than zero.',\n    configuration: [self::OPERATOR => Criterion::GT, self::TEST_VALUE => 0])]\n#[CatalogNodeDecorator(\n    key:'is_greater_than_equal_zero',\n    name: 'Is Greater Than or Equal to Zero',\n    group: 'Flow',\n    description: 'Compare if a context value is greater than or equal to zero.',\n    configuration: [self::OPERATOR => Criterion::GTE, self::TEST_VALUE => 0])]\n#[CatalogNodeDecorator(\n    key:'is_less_than_zero',\n    name: 'Is Less Than Zero',\n    group: 'Flow',\n    description: 'Compare if a context value is less than zero.',\n    configuration: [self::OPERATOR => Criterion::LT, self::TEST_VALUE => 0])]\n#[CatalogNodeDecorator(\n    key:'is_greater_than_equal_zero',\n    name: 'Is Less Than or Equal to Zero',\n    group: 'Flow',\n    description: 'Compare if a context value is less than or equal to zero.',\n    configuration: [self::OPERATOR => Criterion::LTE, self::TEST_VALUE => 0])]\n")))}d.isMDXComponent=!0}}]);