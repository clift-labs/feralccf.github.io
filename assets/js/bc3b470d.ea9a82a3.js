"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8230],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),d=p(n),m=o,f=d["".concat(c,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(f,s(s({ref:t},l),{},{components:n})):r.createElement(f,s({ref:t},l))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[d]="string"==typeof e?e:o,s[1]=i;for(var p=2;p<a;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5247:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var r=n(7462),o=(n(7294),n(3905));const a={sidebar_position:2,title:"JSON Hydrator"},s=void 0,i={unversionedId:"processes/json-hydrator",id:"processes/json-hydrator",title:"JSON Hydrator",description:"The JSON Hydrator is an object that converts a JSON document into a runnable process. The",source:"@site/docs/processes/json-hydrator.md",sourceDirName:"processes",slug:"/processes/json-hydrator",permalink:"/docs/processes/json-hydrator",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"JSON Hydrator"},sidebar:"tutorialSidebar",previous:{title:"Processes",permalink:"/docs/processes/"},next:{title:"Process Override",permalink:"/docs/processes/process-override"}},c={},p=[{value:"Example: Simple Math",id:"example-simple-math",level:2}],l={toc:p},d="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The JSON Hydrator is an object that converts a JSON document into a runnable process. The\nJSON document must conform to a schema that the loader can understand and build nodes\nand connect with edges."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Use the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/cybermantix/feral-core/blob/master/src/Process/ProcessJsonHydrator.php"},(0,o.kt)("strong",{parentName:"a"},(0,o.kt)("inlineCode",{parentName:"strong"},"ProcessJsonHydrator"))),"\nclass to convert a JSON document to a ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/cybermantix/feral-core/blob/master/src/Process/Process.php"},(0,o.kt)("strong",{parentName:"a"},(0,o.kt)("inlineCode",{parentName:"strong"},"Process")))," object.")),(0,o.kt)("h2",{id:"example-simple-math"},"Example: Simple Math"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'\n{\n  "schema_version": 1,\n  "key": "simple_math",\n  "version": 1,\n  "context": {\n    "message": "This is a simple example of stringing nodes together."\n  },\n  "nodes": [\n    {\n      "key": "start",\n      "description": "The starting node",\n      "catalog_node_key": "start",\n      "configuration": {},\n      "edges": {\n        "ok": "set_left"\n      }\n    },\n    {\n      "key": "set_left",\n      "description": "Set the left variable to \'1\'",\n      "catalog_node_key": "set_context_value",\n      "configuration": {\n        "value": "3",\n        "context_path": "left",\n        "value_type": "int"\n      },\n      "edges": {\n        "ok": "set_right"\n      }\n    },\n    {\n      "key": "set_right",\n      "description": "Set the right variable to \'1\'",\n      "catalog_node_key": "set_context_value",\n      "configuration": {\n        "value": "4",\n        "context_path": "right",\n        "value_type": "int"\n      },\n      "edges": {\n        "ok": "add"\n      }\n    },\n    {\n      "key": "add",\n      "description": "Check if the value is greater than zero",\n      "catalog_node_key": "add",\n      "configuration": {\n        "x_context_path": "left",\n        "y_context_path": "right",\n        "result_context_path": "result"\n      },\n      "edges":  {\n        "ok": "info"\n      }\n    },\n    {\n      "key": "info",\n      "description": "Log a statement",\n      "catalog_node_key": "log_info",\n      "configuration": {\n        "message": "The constants are \'{left}\' and \'{right}\'. The results of the calculation is {result}"\n      },\n      "edges": {\n        "ok": "stop"\n      }\n    },\n    {\n      "key": "stop",\n      "description": "Stop",\n      "catalog_node_key": "stop",\n      "configuration": {},\n      "edges": {}\n    }\n  ]\n}\n\n\n')))}u.isMDXComponent=!0}}]);