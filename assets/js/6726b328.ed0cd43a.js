"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7114],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},g=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=c(n),g=r,m=p["".concat(s,".").concat(g)]||p[g]||u[g]||a;return n?o.createElement(m,l(l({ref:t},d),{},{components:n})):o.createElement(m,l({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=g;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:r,l[1]=i;for(var c=2;c<a;c++)l[c]=n[c];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}g.displayName="MDXCreateElement"},5211:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var o=n(7462),r=(n(7294),n(3905));const a={sidebar_position:5,title:"log",tags:["Category:Data","Package:Core"]},l=void 0,i={unversionedId:"nodes/node-code/LogEncodeNodeCode",id:"nodes/node-code/LogEncodeNodeCode",title:"log",description:"Sent a message to the logs. The message can include token variables which will be replaced with values from the context.",source:"@site/docs/nodes/node-code/LogEncodeNodeCode.md",sourceDirName:"nodes/node-code",slug:"/nodes/node-code/LogEncodeNodeCode",permalink:"/docs/nodes/node-code/LogEncodeNodeCode",draft:!1,tags:[{label:"Category:Data",permalink:"/docs/tags/category-data"},{label:"Package:Core",permalink:"/docs/tags/package-core"}],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,title:"log",tags:["Category:Data","Package:Core"]},sidebar:"tutorialSidebar",previous:{title:"json_encode",permalink:"/docs/nodes/node-code/JsonEncodeNodeCode"},next:{title:"random",permalink:"/docs/nodes/node-code/RandomValueNodeCode"}},s={},c=[{value:"Key",id:"key",level:2},{value:"Configuration Keys:",id:"configuration-keys",level:2},{value:"Level Options",id:"level-options",level:3},{value:"Results",id:"results",level:2},{value:"Process Method",id:"process-method",level:2}],d={toc:c},p="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Sent a message to the logs. The message can include token variables which will be replaced with values from the context.\nThis will log to the ",(0,r.kt)("a",{parentName:"p",href:"https://www.php-fig.org/psr/psr-3/"},(0,r.kt)("inlineCode",{parentName:"a"},"Psr\\Log\\LoggerInterface"))," object injected into the constructor. You can log to\nany level found in ",(0,r.kt)("inlineCode",{parentName:"p"},"Psr\\Log\\LogLevel")),(0,r.kt)("h2",{id:"key"},"Key"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"log")),(0,r.kt)("h2",{id:"configuration-keys"},"Configuration Keys:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"message")," - The message to log"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"level")," - the log level to use")),(0,r.kt)("h3",{id:"level-options"},"Level Options"),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/php-fig/log/blob/master/src/LogLevel.php"},(0,r.kt)("strong",{parentName:"a"},(0,r.kt)("inlineCode",{parentName:"strong"},"LogLevel")))," for the PSR implementation"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"emergency"),(0,r.kt)("li",{parentName:"ul"},"alert"),(0,r.kt)("li",{parentName:"ul"},"critical"),(0,r.kt)("li",{parentName:"ul"},"error"),(0,r.kt)("li",{parentName:"ul"},"warning"),(0,r.kt)("li",{parentName:"ul"},"notice"),(0,r.kt)("li",{parentName:"ul"},"info"),(0,r.kt)("li",{parentName:"ul"},"debug")),(0,r.kt)("h2",{id:"results"},"Results"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ok")," - The message has been logged")),(0,r.kt)("h2",{id:"process-method"},"Process Method"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function process(ContextInterface $context): ResultInterface\n{\n    $message = $this->getRequiredConfigurationValue(self::MESSAGE);\n    $level = $this->getRequiredConfigurationValue(self::LEVEL, LogLevel::INFO);\n\n    $message = $this->template->replace($message, $context->getAll());\n    $this->logger->log($level, $message);\n\n    return $this->result(\n        ResultInterface::OK,\n        'Logged the message to the logger.',\n        []\n    );\n}\n")))}u.isMDXComponent=!0}}]);