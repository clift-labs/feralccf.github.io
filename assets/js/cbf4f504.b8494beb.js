"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2473],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(n),m=o,h=p["".concat(c,".").concat(m)]||p[m]||d[m]||a;return n?r.createElement(h,i(i({ref:t},u),{},{components:n})):r.createElement(h,i({ref:t},u))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[p]="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9433:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=n(7462),o=(n(7294),n(3905));const a={id:"context-index",title:"Context"},i=void 0,s={unversionedId:"context/context-index",id:"context/context-index",title:"Context",description:"The context is a set of data that is passed into the process at the start. Then each",source:"@site/docs/context/index.md",sourceDirName:"context",slug:"/context/",permalink:"/docs/context/",draft:!1,tags:[],version:"current",frontMatter:{id:"context-index",title:"Context"},sidebar:"tutorialSidebar",previous:{title:"Results",permalink:"/docs/results/"},next:{title:"Events",permalink:"/docs/events/"}},c={},l=[],u={toc:l},p="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The context is a set of data that is passed into the process at the start. Then each\nNode the Process Engine processes the context is passed to the process method. The\ncontext must implement the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/cybermantix/feral-core/blob/master/src/Process/Context/ContextInterface.php"},(0,o.kt)("strong",{parentName:"a"},(0,o.kt)("inlineCode",{parentName:"strong"},"ContextInterface"))),"\ninterface. The data stored in the context uses a key to store the data. When adding\ndata to the Context, use the set method."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Suggestions for the Context key"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"Use lower case"),(0,o.kt)("li",{parentName:"ul"},"Use snake case (one_two_three)"))),(0,o.kt)("p",null,"To get data from the Context, you can use the get method which can return any\nvalue or you can use one of the many helper method which type the data and\nwill throw an error if the value stored is incorrect. See getInt, getFloat,\ngetString, getArray, and getObject in the ContextInterface."),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/cybermantix/feral-core/blob/master/src/Process/Context/Context.php"},(0,o.kt)("strong",{parentName:"a"},(0,o.kt)("inlineCode",{parentName:"strong"},"Context"))),"\nclass is a default implementation of the ContextInterface and uses a simple\nassociative array to store the data. If you code requires a sophisticted data\nstorage and retrieval, like using Redis, then you can make your own context\nand implement the ContextInterface."),(0,o.kt)("p",null,"To make live easier in your NodeCode, you can use the\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/cybermantix/feral-core/blob/master/src/Process/NodeCode/Traits/ContextValueTrait.php"},(0,o.kt)("strong",{parentName:"a"},(0,o.kt)("inlineCode",{parentName:"strong"},"ContextValueTrait"))),"\nto manage deep values like objects and multi-dimensional arrays. This example from ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/cybermantix/feral-core/blob/master/src/Process/NodeCode/Data/CounterNodeCode.php"},(0,o.kt)("strong",{parentName:"a"},(0,o.kt)("inlineCode",{parentName:"strong"},"CounterNodeCode"))),"\nuses the ContextValueTrait and the getValueFromContext method."),(0,o.kt)("p",null,"There is also a ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/cybermantix/feral-core/blob/master/src/Process/NodeCode/Traits/ContextMutationTrait.php"},(0,o.kt)("strong",{parentName:"a"},(0,o.kt)("inlineCode",{parentName:"strong"},"ContextMutationTrait"))),"\nto modify the context and set values into the context allowing for deep paths."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"class CounterNodeCode implements NodeCodeInterface\n{\n    use NodeCodeMetaTrait,\n        ResultsTrait,\n        ConfigurationTrait,\n        ConfigurationValueTrait,\n        EmptyConfigurationDescriptionTrait,\n        ContextValueTrait,\n        ContextMutationTrait,\n        OkResultsTrait;\n\n    const DEFAULT_CONTEXT_PATH = '_counter';\n    ...\n    ...\n    ...\npublic function process(ContextInterface $context): ResultInterface\n{\n    $contextPath = $this->getRequiredConfigurationValue(self::CONTEXT_PATH, self::DEFAULT_CONTEXT_PATH);\n    $counter = $this->getValueFromContext($contextPath, $context);\n    if (!$counter) {\n        $counter = 0;\n    }\n    $counter++;\n    $this->setValueInContext($contextPath, $counter, $context);\n\n    return $this->result(\n        ResultInterface::OK,\n        'Changed the counter to %u.',\n        [$counter]\n    );\n}\n")))}d.isMDXComponent=!0}}]);