"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1527],{3905:(e,t,o)=>{o.d(t,{Zo:()=>c,kt:()=>m});var a=o(7294);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function n(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,a)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?n(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):n(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function l(e,t){if(null==e)return{};var o,a,r=function(e,t){if(null==e)return{};var o,a,r={},n=Object.keys(e);for(a=0;a<n.length;a++)o=n[a],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(a=0;a<n.length;a++)o=n[a],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var s=a.createContext({}),d=function(e){var t=a.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},c=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var o=e.components,r=e.mdxType,n=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=d(o),g=r,m=p["".concat(s,".").concat(g)]||p[g]||u[g]||n;return o?a.createElement(m,i(i({ref:t},c),{},{components:o})):a.createElement(m,i({ref:t},c))}));function m(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var n=o.length,i=new Array(n);i[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:r,i[1]=l;for(var d=2;d<n;d++)i[d]=o[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,o)}g.displayName="MDXCreateElement"},7044:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>n,metadata:()=>l,toc:()=>d});var a=o(7462),r=(o(7294),o(3905));const n={sidebar_position:3,title:"Catalog Nodes"},i=void 0,l={unversionedId:"nodes/catalog-nodes",id:"nodes/catalog-nodes",title:"Catalog Nodes",description:"Catalog Nodes apply configuration to NodeCode allowing NodeCode to be reused in different",source:"@site/docs/nodes/catalog-nodes.md",sourceDirName:"nodes",slug:"/nodes/catalog-nodes",permalink:"/docs/nodes/catalog-nodes",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Catalog Nodes"},sidebar:"tutorialSidebar",previous:{title:"What is a node?",permalink:"/docs/nodes/what-is-a-node"},next:{title:"NodeCode",permalink:"/docs/nodes/node-code/"}},s={},d=[{value:"CatalogNode",id:"catalognode",level:2},{value:"Categories",id:"categories",level:3},{value:"Catalog Node Decorator",id:"catalog-node-decorator",level:3}],c={toc:d},p="wrapper";function u(e){let{components:t,...o}=e;return(0,r.kt)(p,(0,a.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Catalog Nodes apply configuration to NodeCode allowing NodeCode to be reused in different\nways. For example, the ",(0,r.kt)("a",{parentName:"p",href:"/docs/nodes/node-code/ContextValueComparatorNodeCode"},"ContextValueComparatorNodeCode"),"\ncan have many Catalog Nodes that define different common comparators like ",(0,r.kt)("inlineCode",{parentName:"p"},"Greater Than Zero"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Is Zero"),"\nor any other comparator that is based on a constant. "),(0,r.kt)("h2",{id:"catalognode"},"CatalogNode"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/cybermantix/feral-core/blob/master/src/Process/Catalog/CatalogNode/CatalogNodeInterface.php"},(0,r.kt)("strong",{parentName:"a"},(0,r.kt)("inlineCode",{parentName:"strong"},"CatalogNodeInterface"))),"\ninterface must be implemented to have a CatalogNode work within the framework. The ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/cybermantix/feral-core/blob/master/src/Process/Catalog/CatalogNode/CatalogNode.php"},(0,r.kt)("strong",{parentName:"a"},(0,r.kt)("inlineCode",{parentName:"strong"},"CatalogNode"))),"\nimplementation can be used with your favorite framework\nto add Catalog Nodes via a container and declarative options. "),(0,r.kt)("h3",{id:"categories"},"Categories"),(0,r.kt)("p",null,"Catalog Nodes are grouped into categories using the group property. It's possible to have hundreds of\nnodes in a Catalog so grouping them is critical to keep the catalog orderly."),(0,r.kt)("h3",{id:"catalog-node-decorator"},"Catalog Node Decorator"),(0,r.kt)("p",null,"Since Catalog Nodes are NodeCode with configuration applied, you can use the Attribute\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/cybermantix/feral-core/blob/master/src/Process/Attributes/CatalogNodeDecorator.php"},(0,r.kt)("strong",{parentName:"a"},(0,r.kt)("inlineCode",{parentName:"strong"},"Feral\\Core\\Process\\Attributes\\CatalogNodeDecorator")))," in\nyour NodeCode clas to add Catalog Nodes to your catalog. See ","[/node-code/JsonDecodeNodeCode]",")(this example) to see\na NodeCode that has been decorated with a Catalog Node."),(0,r.kt)("p",null,"Example: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/cybermantix/feral-core/blob/master/src/Process/NodeCode/Flow/ContextValueComparatorNodeCode.php"},(0,r.kt)("strong",{parentName:"a"},(0,r.kt)("inlineCode",{parentName:"strong"},"ContextValueComparatorNodeCode")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"...\n...\n...\nuse Feral\\Core\\Process\\Attributes\\CatalogNodeDecorator;\n\n#[CatalogNodeDecorator(\n    key:'is_zero',\n    name: 'Is Zero',\n    group: 'Flow',\n    description: 'Compare if a context value is zero.',\n    configuration: [self::OPERATOR => Criterion::EQ, self::TEST_VALUE => 0])]\nclass ContextValueComparatorNodeCode implements NodeCodeInterface\n{\n    use NodeCodeMetaTrait,\n        ResultsTrait,\n        ConfigurationTrait,\n        ConfigurationValueTrait,\n        EmptyConfigurationDescriptionTrait,\n        ContextValueTrait,\n        BooleanResultsTrait;\n...\n...\n...\n")))}u.isMDXComponent=!0}}]);