"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7547],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(n),f=o,g=p["".concat(s,".").concat(f)]||p[f]||d[f]||a;return n?r.createElement(g,l(l({ref:t},u),{},{components:n})):r.createElement(g,l({ref:t},u))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=f;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:o,l[1]=i;for(var c=2;c<a;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},7468:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const a={sidebar_position:5,title:"slack-webhook",tags:["Category:Data","Package:Slack"]},l=void 0,i={unversionedId:"reference/node-code/LogNodeCode",id:"reference/node-code/LogNodeCode",title:"slack-webhook",description:"Send a message to a slack webhook. The message must be in the context",source:"@site/docs/reference/node-code/LogNodeCode.md",sourceDirName:"reference/node-code",slug:"/reference/node-code/LogNodeCode",permalink:"/docs/reference/node-code/LogNodeCode",draft:!1,tags:[{label:"Category:Data",permalink:"/docs/tags/category-data"},{label:"Package:Slack",permalink:"/docs/tags/package-slack"}],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,title:"slack-webhook",tags:["Category:Data","Package:Slack"]},sidebar:"tutorialSidebar",previous:{title:"json_encode",permalink:"/docs/reference/node-code/JsonEncodeNodeCode"},next:{title:"random",permalink:"/docs/reference/node-code/RandomValueNodeCode"}},s={},c=[{value:"Key",id:"key",level:2},{value:"Configuration Keys:",id:"configuration-keys",level:2},{value:"Level Options",id:"level-options",level:3},{value:"Results",id:"results",level:2},{value:"Process Method",id:"process-method",level:2}],u={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Send a message to a slack webhook. The message must be in the context\nand it's sent to the URL found in the webhook configuration value."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"You can use the block builder to set blocks into the context")),(0,o.kt)("h2",{id:"key"},"Key"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"log")),(0,o.kt)("h2",{id:"configuration-keys"},"Configuration Keys:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"message")," - The message to log"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"level")," - the log level to use")),(0,o.kt)("h3",{id:"level-options"},"Level Options"),(0,o.kt)("p",null,"See ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/php-fig/log/blob/master/src/LogLevel.php"},(0,o.kt)("strong",{parentName:"a"},(0,o.kt)("inlineCode",{parentName:"strong"},"LogLevel")))," for the PSR implementation"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"emergency"),(0,o.kt)("li",{parentName:"ul"},"alert"),(0,o.kt)("li",{parentName:"ul"},"critical"),(0,o.kt)("li",{parentName:"ul"},"error"),(0,o.kt)("li",{parentName:"ul"},"warning"),(0,o.kt)("li",{parentName:"ul"},"notice"),(0,o.kt)("li",{parentName:"ul"},"info"),(0,o.kt)("li",{parentName:"ul"},"debug")),(0,o.kt)("h2",{id:"results"},"Results"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ok")," - The message has been logged")),(0,o.kt)("h2",{id:"process-method"},"Process Method"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"public function process(ContextInterface $context): ResultInterface\n{\n    $contextPath = $this->getRequiredConfigurationValue(self::CONTEXT_PATH, self::DEFAULT_CONTEXT_PATH);\n    $contextMessagePath = $this->getRequiredConfigurationValue(self::CONTEXT_MESSAGE_PATH, self::DEFAULT_CONTEXT_MESSAGE_PATH);\n    $url = $this->getRequiredConfigurationValue(self::WEBHOOK_URL);\n    $message = $this->getRequiredStringConfigurationValue($contextMessagePath);\n\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $message);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: ' . self::CONTENT_TYPE]);\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n\n    $response = curl_exec($ch);\n    $responseCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n    if ($response === false) {\n        throw new ProcessException(sprintf(\n            'Slack Webhook error connecting to \"%s\". Error: %s',\n            $url,\n            curl_error($ch)\n        ));\n    }\n\n    $this->setValueInContext($contextPath, $response, $context);\n    curl_close($ch);\n    return $this->result(\n        ResultInterface::OK,\n        'Slack Webhook call to \"%s\" which returned code \"%u\" with %u bytes.',\n        [$url, $responseCode, strlen($response)]\n    );\n}\n")))}d.isMDXComponent=!0}}]);