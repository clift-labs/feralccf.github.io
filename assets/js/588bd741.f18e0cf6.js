"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4053],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(n),g=r,f=d["".concat(l,".").concat(g)]||d[g]||u[g]||o;return n?a.createElement(f,s(s({ref:t},p),{},{components:n})):a.createElement(f,s({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=g;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[d]="string"==typeof e?e:r,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},9386:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:1,id:"quick-start",title:"Feral Quick Start"},s=void 0,i={unversionedId:"getting-started/quick-start",id:"getting-started/quick-start",title:"Feral Quick Start",description:"Getting Started",source:"@site/docs/getting-started/quick-start.md",sourceDirName:"getting-started",slug:"/getting-started/quick-start",permalink:"/docs/getting-started/quick-start",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/getting-started/quick-start.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,id:"quick-start",title:"Feral Quick Start"},sidebar:"tutorialSidebar",previous:{title:"Getting Started",permalink:"/docs/category/getting-started"},next:{title:"Feral Inline Sample Project",permalink:"/docs/getting-started/inline-sample"}},l={},c=[{value:"Getting Started",id:"getting-started",level:2},{value:"Step 1: Start a new symfony project",id:"step-1-start-a-new-symfony-project",level:3},{value:"Step 2: Install Feral Inline",id:"step-2-install-feral-inline",level:3},{value:"Step 3: Create a new process",id:"step-3-create-a-new-process",level:3},{value:"Step 3a: Create a catalog node service",id:"step-3a-create-a-catalog-node-service",level:4},{value:"Step 3b: Create the process JSON file",id:"step-3b-create-the-process-json-file",level:4},{value:"Step 4: Run the process with the console",id:"step-4-run-the-process-with-the-console",level:3},{value:"Step 4a: List the available processes",id:"step-4a-list-the-available-processes",level:4},{value:"Step 4b: Run the process",id:"step-4b-run-the-process",level:4}],p={toc:c},d="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"getting-started"},"Getting Started"),(0,r.kt)("p",null,"Feral is written in PHP and uses Composer and Symfony. Getting started with the free version of Feral is easy."),(0,r.kt)("h3",{id:"step-1-start-a-new-symfony-project"},"Step 1: Start a new symfony project"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'# Change the skeleton version to the latest https://packagist.org/packages/symfony/skeleton\ncomposer create-project symfony/skeleton:"6.2.*" my-app\n')),(0,r.kt)("h3",{id:"step-2-install-feral-inline"},"Step 2: Install Feral Inline"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"# See packagist for the latest https://packagist.org/packages/feral/inline\ncomposer composer require feral/inline\n")),(0,r.kt)("h3",{id:"step-3-create-a-new-process"},"Step 3: Create a new process"),(0,r.kt)("p",null,"Using one custom catalog node and several out of the box catalog nodes, create a new process."),(0,r.kt)("h4",{id:"step-3a-create-a-catalog-node-service"},"Step 3a: Create a catalog node service"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"The following example uses a free JSON service to get data. See ",(0,r.kt)("a",{parentName:"p",href:"https://catfact.ninja"},"https://catfact.ninja")," for their awesome JSON service.")),(0,r.kt)("p",null,"Add the following to your services.yaml file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"    feral.catalog.cat_data:\n        class: Feral\\Core\\Process\\Catalog\\CatalogNode\\CatalogNode\n        tags: ['feral.catalog_node']\n        calls:\n            - [setKey, ['cat_data']]\n            - [setNodeCodeKey, ['http_data']]\n            - [setName, ['Cat Data']]\n            - [setGroup, ['Data']]\n            - [setDescription, ['Get random facts about cats.']]\n            - [setConfiguration, [url: 'https://catfact.ninja/fact']]\n")),(0,r.kt)("h4",{id:"step-3b-create-the-process-json-file"},"Step 3b: Create the process JSON file"),(0,r.kt)("p",null,"Create the following file api_data_impoort.json in the var/processes directory"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "schema_version": 1,\n  "key": "api_data_import",\n  "version": 1,\n  "context": {},\n  "nodes": [\n    {\n      "key": "start",\n      "description": "The starting node",\n      "catalog_node_key": "start",\n      "configuration": {},\n      "edges": {\n        "ok": "api_data"\n      }\n    },\n    {\n      "key": "api_data",\n      "description": "Get Cat Data",\n      "catalog_node_key": "cat_data",\n      "configuration": {},\n      "edges": {\n        "ok": "info"\n      }\n    },\n    {\n      "key": "info",\n      "description": "Log a statement",\n      "catalog_node_key": "log_info",\n      "configuration": {\n        "message": "Get the country data"\n      },\n      "edges": {\n        "ok": "stop"\n      }\n    },\n    {\n      "key": "stop",\n      "description": "Stop",\n      "catalog_node_key": "stop",\n      "configuration": {},\n      "edges": {}\n    }\n  ]\n}\n')),(0,r.kt)("h3",{id:"step-4-run-the-process-with-the-console"},"Step 4: Run the process with the console"),(0,r.kt)("h4",{id:"step-4a-list-the-available-processes"},"Step 4a: List the available processes"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"bin/console feral:list:processes\n")),(0,r.kt)("p",null,"Should return the following"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"List the processes\n - api_data_import\n")),(0,r.kt)("h4",{id:"step-4b-run-the-process"},"Step 4b: Run the process"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"bin/console feral:run api_data_import -vv\n")),(0,r.kt)("p",null,"Should return the following"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Run Feral Run!\nABOUT:\nThe Feral system is an open source application composition framework allowing processes to \nbe build and run for APIs and other applications. The Feral system was built after a couple \ndozen years working with open source projects and constantly in need of composition to manipulate \ndata. If you are one of those who don't think a system like this should exist in PHP, feel free to \nemail gotohell@software-is-not-religion.com. The Feral system was conceived in the warped \nbrain of Gary Clift.\n\nProcess Key: api_data_import\n-----------\n  CONTEXT\n-----------\nContext:  was not passed in.\n-----------\n  PROCESS\n-----------\n[info] Starting a process with 4 nodes.\n[info] Processing Node start\n[info] Processing Node api_data\n[info] Processing Node info\n[info] Get the country data\n[info] Processing Node stop\n[info] Process Complete\n------------\n  FINALIZE\n------------\nProcess 'api_data_import' Complete.\n")))}u.isMDXComponent=!0}}]);