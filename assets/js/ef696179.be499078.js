"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2151],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),m=s,g=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(g,a(a({ref:t},p),{},{components:n})):r.createElement(g,a({ref:t},p))}));function g(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=n.length,a=new Array(o);a[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:s,a[1]=i;for(var c=2;c<o;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7968:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=n(7462),s=(n(7294),n(3905));const o={id:"results-index",title:"Results"},a=void 0,i={unversionedId:"results/results-index",id:"results/results-index",title:"Results",description:"When a NodeCode completes processing, it must return a",source:"@site/docs/results/index.md",sourceDirName:"results",slug:"/results/",permalink:"/docs/results/",draft:!1,tags:[],version:"current",frontMatter:{id:"results-index",title:"Results"},sidebar:"tutorialSidebar",previous:{title:"Edges",permalink:"/docs/edges/"},next:{title:"Context",permalink:"/docs/context/"}},l={},c=[{value:"Status",id:"status",level:2},{value:"Message",id:"message",level:2},{value:"Result Descriptions",id:"result-descriptions",level:2},{value:"Result Description Traits",id:"result-description-traits",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,s.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"When a NodeCode completes processing, it must return a\n",(0,s.kt)("a",{parentName:"p",href:"https://github.com/cybermantix/feral-core/blob/master/src/Process/Result/ResultInterface.php"},(0,s.kt)("strong",{parentName:"a"},(0,s.kt)("inlineCode",{parentName:"strong"},"ResultInterface"))),"\nobject. This object contains two instance variables. "),(0,s.kt)("p",null,"In this code example from ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/cybermantix/feral-core/blob/master/src/Process/NodeCode/Data/LogNodeCode.php"},(0,s.kt)("strong",{parentName:"a"},(0,s.kt)("inlineCode",{parentName:"strong"},"LogNodeCode"))),"\nyou can see the method returns the status of ",(0,s.kt)("inlineCode",{parentName:"p"},"ok")," and a simple message."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"public function process(ContextInterface $context): ResultInterface\n{\n    $message = $this->getRequiredConfigurationValue(self::MESSAGE);\n    $level = $this->getRequiredConfigurationValue(self::LEVEL, LogLevel::INFO);\n\n    $message = $this->template->replace($message, $context->getAll());\n    $this->logger->log($level, $message);\n\n    return $this->result(\n        ResultInterface::OK,\n        'Logged the message to the logger.',\n        []\n    );\n}\n\n")),(0,s.kt)("h2",{id:"status"},"Status"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"status")," variable indicates\nto the process engine the computer readable value that was return. This is used with\nthe edges to link to the next Node."),(0,s.kt)("admonition",{type:"tip"},(0,s.kt)("p",{parentName:"admonition"},"The ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/cybermantix/feral-core/blob/master/src/Process/Result/ResultInterface.php"},(0,s.kt)("strong",{parentName:"a"},(0,s.kt)("inlineCode",{parentName:"strong"},"ResultInterface"))),"\nintrface contains over a dozen commonly used response statuses like ",(0,s.kt)("inlineCode",{parentName:"p"},"ok"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"low"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"high"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"true"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"false"),", and more.")),(0,s.kt)("h2",{id:"message"},"Message"),(0,s.kt)("p",null,"The result object can also contain an optional message that is human-readable to describe\nthe result returned from the NodeCode process method. These messages can be used in debugging\nor telemetry to identify errant issues in a process."),(0,s.kt)("h2",{id:"result-descriptions"},"Result Descriptions"),(0,s.kt)("p",null,"These objects are returned from the NodeCode objects to indicate the possible responses from\nthe NodeCode. These descriptions help UI tools and validation code manage the process creation."),(0,s.kt)("h2",{id:"result-description-traits"},"Result Description Traits"),(0,s.kt)("p",null,"Since many of the NodeCode return common result statuses, the core package contains several\ncommon results. ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/cybermantix/feral-core/tree/master/src/Process/NodeCode/Traits"},"See this package"),"\nfor all the result description traits. "),(0,s.kt)("p",null,"See this example of the ",(0,s.kt)("inlineCode",{parentName:"p"},"OkResultsTrait")," being used."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"class LogNodeCode implements NodeCodeInterface\n{\n    use NodeCodeMetaTrait,\n        ResultsTrait,\n        ConfigurationTrait,\n        ConfigurationValueTrait,\n        EmptyConfigurationDescriptionTrait,\n        ContextValueTrait,\n        OkResultsTrait;\n\n    const KEY = 'log';\n\n    const NAME = 'Log Message';\n    ```\n")))}d.isMDXComponent=!0}}]);